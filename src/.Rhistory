geom_jitter(aes(x=map,y=time), data = data, color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
data$map <- fct_reorder(data$map, levels=maps)
data$map <- fct_reorder(data$map, maps, levels=maps)
data$map <- fct_reorder(levels(data$map), levels=maps)
data$map <- fct_reorder(levels(data$map), levels=maps)
data$map <- fct_reorder(data$map, =maps)
data$map <- fct_reorder(data$map, maps)
levels(data$map) <- fct_reorder(data$map, maps)
data <- data %>% rename('time' = h) %>%
fct_reorder(data$map, maps)
data <-
tibble(map = factor(),
t = numeric(),
h = vctrs::new_duration(1))
for (mapn in maps) {
for (tour in tournament_parameters) {
for (mut in mutation_parameters) {
timesname = c(
"../data/calibration_results/",
mapn,
"/avg_execution_time_",
tour,
"_MUT",
mut,
".csv"
)
runtime = read_csv(
paste(timesname, collapse = ""),
col_names = c("map", "t", "h"),
col_types = list(col_character(), col_double(), col_guess())
)
runtime <- runtime %>% mutate(map = factor(map))
data <- add_row(data, runtime)
}
}
}
data <- data %>% rename('time' = h) %>%
fct_reorder(data$map, maps)
data <- data %>% rename('time' = h) %>%
fct_reorder(data$map, factor(maps))
data <- data %>% rename('time' = h) %>%
fct_reorder(data$map, maps)
data$map
data
# Plot runtime averages
# TODO reorder maps
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(aes(x=factor(map),y=time), data = data, color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
data <- data %>% rename('time' = h) #%>%
data <-
tibble(map = factor(),
t = numeric(),
h = vctrs::new_duration(1))
for (mapn in maps) {
for (tour in tournament_parameters) {
for (mut in mutation_parameters) {
timesname = c(
"../data/calibration_results/",
mapn,
"/avg_execution_time_",
tour,
"_MUT",
mut,
".csv"
)
runtime = read_csv(
paste(timesname, collapse = ""),
col_names = c("map", "t", "h"),
col_types = list(col_character(), col_double(), col_guess())
)
runtime <- runtime %>% mutate(map = factor(map))
data <- add_row(data, runtime)
}
}
}
data <- data %>% rename('time' = h) #%>%
ns_times <- data %>%
group_by(map) %>%
summarise(across(time, mean)) %>%
mutate(map = fct_reorder(map, maps))
all_times <- competitors %>% add_column("ESS-NS" = ns_times$time, .before = "ESSIM-EA")
# Convert to longer format for plotting
d <- melt(all_times, id.vars="map", value.name = "time") %>% rename(method = variable)
# Plot runtime averages
# TODO reorder maps
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(aes(x=factor(map),y=time), data = data, color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
# TODO reorder maps
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
competitors <- competitors %>% mutate(map = factor(map, levels=maps)) #%>%
View(competitors)
all_times <- competitors %>% add_column("ESS-NS" = ns_times$time, .before = "ESSIM-EA")
View(all_times)
# Plot runtime averages
# TODO reorder maps
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
competitors <- competitors %>% mutate(map = factor(map, levels=maps)) #%>%
all_times <- competitors %>% add_column("ESS-NS" = ns_times$time, .before = "ESSIM-EA")
# Plot runtime averages
# TODO reorder maps
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
#| echo: true
knitr::opts_chunk$set(message = FALSE,
warning = FALSE
#cache = TRUE
)
source("functions.R")
maps <- factor(levels=c('533','519','751','534','520'))
maps <- c(533,519,751,534,520)
maps <- c('533','519','751','534','520')
library(scales)
library(lubridate)
competitors <-
read_csv(
"../data/runtimes_competitors.csv",
col_names = TRUE,
col_types = list(col_character(), col_guess(), col_guess(), col_guess())
)
competitors <- competitors %>% mutate(map = factor(map, levels=maps)) #%>%
tournament_parameters = c("0.75", "0.8", "0.85", "0.9")
mutation_parameters = c("0.1", "0.2", "0.3", "0.4")
n_configurations = length(tournament_parameters) * length(mutation_parameters)
data <-
tibble(map = factor(),
t = numeric(),
h = vctrs::new_duration(1))
for (mapn in maps) {
for (tour in tournament_parameters) {
for (mut in mutation_parameters) {
timesname = c(
"../data/calibration_results/",
mapn,
"/avg_execution_time_",
tour,
"_MUT",
mut,
".csv"
)
runtime = read_csv(
paste(timesname, collapse = ""),
col_names = c("map", "t", "h"),
col_types = list(col_character(), col_double(), col_guess())
)
runtime <- runtime %>% mutate(map = factor(map))
data <- add_row(data, runtime)
}
}
}
data <- data %>% rename('time' = h) #%>%
ns_times <- data %>%
group_by(map) %>%
summarise(across(time, mean)) %>%
mutate(map = fct_reorder(map, maps))
# TODO convertir a HH:MM:SS
seconds_to_period(ns_times$time)
all_times <- competitors %>% add_column("ESS-NS" = ns_times$time, .before = "ESSIM-EA")
# Convert to longer format for plotting
d <- melt(all_times, id.vars="map", value.name = "time") %>% rename(method = variable)
# Plot runtime averages
# TODO reorder maps
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
competitors <-
read_csv(
"../data/runtimes_competitors.csv",
col_names = TRUE,
col_types = list(col_character(), col_guess(), col_guess(), col_guess())
)
competitors <- competitors %>% mutate(map = factor(map, levels=maps)) #%>%
mutate(map = fct_reorder(map, maps))
tournament_parameters = c("0.75", "0.8", "0.85", "0.9")
mutation_parameters = c("0.1", "0.2", "0.3", "0.4")
#| echo: true
knitr::opts_chunk$set(message = FALSE,
warning = FALSE
#cache = TRUE
)
source("functions.R")
maps <- factor(levels=c('533','519','751','534','520'))
maps <- c(533,519,751,534,520)
maps <- c('533','519','751','534','520')
#| code-summary: "Show code for interactive version"
library(scales)
library(lubridate)
competitors <-
read_csv(
"../data/runtimes_competitors.csv",
col_names = TRUE,
col_types = list(col_character(), col_guess(), col_guess(), col_guess())
)
competitors <- competitors %>% mutate(map = factor(map, levels=maps)) #%>%
tournament_parameters = c("0.75", "0.8", "0.85", "0.9")
mutation_parameters = c("0.1", "0.2", "0.3", "0.4")
n_configurations = length(tournament_parameters) * length(mutation_parameters)
data <-
tibble(map = factor(),
t = numeric(),
h = vctrs::new_duration(1))
for (mapn in maps) {
for (tour in tournament_parameters) {
for (mut in mutation_parameters) {
timesname = c(
"../data/calibration_results/",
mapn,
"/avg_execution_time_",
tour,
"_MUT",
mut,
".csv"
)
runtime = read_csv(
paste(timesname, collapse = ""),
col_names = c("map", "t", "h"),
col_types = list(col_character(), col_double(), col_guess())
)
runtime <- runtime %>% mutate(map = factor(map))
data <- add_row(data, runtime)
}
}
}
data <- data %>% rename('time' = h)
ns_times <- data %>%
group_by(map) %>%
summarise(across(time, mean)) %>%
mutate(map = fct_reorder(map, maps))
View(ns_times)
ns_times
View(data)
data
View(data)
View(competitors)
ns_times <- data %>%
group_by(map) %>%
summarise(across(t, mean)) %>%
mutate(map = fct_reorder(map, maps))
ns_times <- data %>%
group_by(map) %>%
summarise(across(time, mean)) %>%
mutate(map = fct_reorder(map, maps))
hms(ns_times)
ns_times
hms(ns_times$time)
hms(ns_times$time[1])
ns_times$time[1]
lubridate::as_date(ns_times$time)
lubridate::as_datetime(ns_times$time)
lubridate::as_datetime(ns_times$time)
lubridate::as_datetime(ns_times$time[1])
ns_times$time[1]
time_diff<-ns_times$time[1]
lubridate::as.duration(time_diff)
time_diff_dur<-lubridate::as.duration(time_diff)
time_diff_dur
time_diff_dur<-lubridate::as.interval(time_diff)
time_diff_dur<-lubridate::as.interval(time_diff,start=0)
time_diff_dur<-lubridate::as.interval(time_diff,start=instant(0))
as.period(ns_times$time)
all_times <- competitors %>% add_column("ESS-NS" = as.period(ns_times$time), .before = "ESSIM-EA")
# Convert to longer format for plotting
d <- melt(all_times, id.vars="map", value.name = "time") %>% rename(method = variable)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method), show.legend = FALSE) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method, show.legend = FALSE)) +
geom_point(size = 4, aes(shape = method), show.legend = FALSE) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method), show.legend = FALSE) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method, show.legend = FALSE)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method), show.legend = FALSE) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method), show.legend = FALSE) +
geom_point(size = 4, aes(shape = method), show.legend = FALSE) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method, shape=method)) +
geom_point(size = 4) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, shape=method) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
ggplotly(p, tooltip = c("label"))
ggplotly(p, tooltip = c("method"))
ggplotly(p, tooltip = c("value"))
ggplotly(p, tooltip = c("time"))
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method, shape = method)) +
geom_point(size = 4) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = 'black', show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p, tooltip = c("time"))
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method, shape = method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = cbp, show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p, tooltip = c("time"))
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = cbp, show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p, tooltip = c("time"))
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = cbp[1], show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p, tooltip = c("time"))
all_times <- competitors %>% add_column("ESS-NS" = ns_times$time, .before = "ESSIM-EA")
# Convert to longer format for plotting
d <- melt(all_times, id.vars="map", value.name = "time") %>% rename(method = variable)
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = cbp[1], show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p, tooltip = c("time"))
# Plot runtime averages
p <-ggplot(d, aes(map, time, col=method)) +
geom_point(size = 4, aes(shape = method)) +
scale_y_time(breaks = date_breaks('30 min'), labels = date_format('%H:%M')) +
theme(text = element_text(size = 20)) +
geom_jitter(data = data, aes(x=map,y=time), color = cbp[1], show.legend = FALSE) +
scale_color_manual(values = cbp) +
ylab("execution time\n\n\n\n\n\n") +
ggtitle("Runtime distribution for ESS-NS")
ggplotly(p)
ggplotly(p, tooltip = c("map","time"))
ns_times <- data %>%
group_by(map) %>%
summarise_by_time(across(time, mean)) %>%
mutate(map = fct_reorder(map, maps))
library(timetk)
install.packages("rhino","timetk")
install.packages("rhino", "timetk")
install.packages("rhino", "timetk")
install.packages("rhino", "timetk")
install.packages("rhino", "timetk")
library(rhino)
library("rhino")
install.packages("rhino")
library("rhino")
library(rhino)
